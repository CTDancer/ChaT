"""
Django settings for ChaT project.

Generated by 'django-admin startproject' using Django 4.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
import os
import uuid
import json
from json import JSONDecodeError
from pathlib import Path

import pytz
from pytz import UnknownTimeZoneError

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-@#vwiro_dt4v7+ss=g9!(zhq^)p7(xtd1-3+7jl#-p8b(@3k3_'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

def get_int_from_env(name: str, value: int) -> int:
    try:
        return int(os.environ.get(name, ''))
    except ValueError:
        return value


def get_array_from_env(name: str, value: list) -> list:
    try:
        return json.loads(os.environ.get(name, ''))
    except JSONDecodeError:
        return value


def get_bool_from_env(name: str, value: bool) -> bool:
    s = os.environ.get(name, '')
    if s == 'True':
        return True
    elif s == 'False':
        return False
    else:
        return value

SITE_NAME = os.environ.get('SITE_NAME', 'Open Tree Hole')  # 网站名称
lower_site_name = SITE_NAME.replace(' ', '').lower()
HOST = os.environ.get('HOST', f'www.{lower_site_name}.com')  # 网站域名
LANGUAGE = os.environ.get('LANGUAGE', 'zh-Hans')  # 语言代码
ALLOW_CONNECT_HOSTS = get_array_from_env('ALLOW_CONNECT_HOSTS', [HOST])  # 允许连接的域名
# EMAIL_WHITELIST = get_array_from_env('EMAIL_WHITELIST', ['test.com','opentreehole.org'])  # 允许注册树洞的邮箱域名
MIN_PASSWORD_LENGTH = get_int_from_env('MIN_PASSWORD_LENGTH', 8)  # 允许的最短用户密码长度
VALIDATION_CODE_EXPIRE_TIME = get_int_from_env('VALIDATION_CODE_EXPIRE_TIME',
                                               5)  # 验证码失效时间（分钟）
MAX_PAGE_SIZE = get_int_from_env('MAX_PAGE_SIZE', 10)
PAGE_SIZE = get_int_from_env('PAGE_SIZE', 10)
FLOOR_PREFETCH_LENGTH = get_int_from_env('FLOOR_PREFETCH_LENGTH', 10)

# 缓存设置
HOLE_CACHE_SECONDS = get_int_from_env('HOLE_CACHE_SECONDS', 10 * 60)
FLOOR_CACHE_SECONDS = get_int_from_env('FLOOR_CACHE_SECONDS', 10 * 60)

# # 启用CSRF保护
# CSRF_COOKIE_SECURE = True
# CSRF_COOKIE_HTTPONLY = True
# CSRF_USE_SESSIONS = True

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework.authtoken',
    'rest_framework',
    'corsheaders',
    'hole',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
]

ROOT_URLCONF = 'ChaT.urls'

# 足够长的密码，供 Django 安全机制
SECRET_KEY = os.environ.get('SECRET_KEY', str(uuid.uuid4()))

# 注册用 API Key (Seed)
REGISTER_API_KEY_SEED = os.environ.get('REGISTER_API_KEY_SEED', 'abcdefg')

# 用户名加密公钥文件(PEM)路径
USERNAME_PUBLIC_KEY_PATH = os.environ.get('USERNAME_PUBLIC_KEY_PATH',
                                          'treehole_demo_public.pem')

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['frontend/dist'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ChaT.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'dbpj',
        'USER': 'root',
        'PASSWORD': 'shadowood',
        'HOST': '127.0.0.1',
    }
}

# 自定义用户模型
AUTH_USER_MODEL = 'hole.User'


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "frontend\dist\static"),
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# 跨域增加忽略
# CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_ALL_ORIGINS = True

CORS_ALLOW_METHODS = (
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
    'VIEW',
)
CORS_ALLOW_HEADERS = (
    'XMLHttpRequest',
    'X_FILENAME',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',

)